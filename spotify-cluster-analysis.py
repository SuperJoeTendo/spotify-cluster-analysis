# -*- coding: utf-8 -*-
"""Copy of spotify.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eOG8FxNXRe_sdc4nWZs__GAqU63dDjGs

3/30 Sunday
"""

import pandas as pd

# xls = pd.ExcelFile("Spotify_Daily_Top_50.xlsx")
# sheet_names = xls.sheet_names

# # Select sheet names from page 2 to 22
# sheet_names_to_process = sheet_names[1:22]

# # Define the date range for filtering
# start_date = "2024-01-01"
# end_date = "2024-12-31"

# # initialize an empty list to store filtered data
# filtered_data = []

# # Process each sheet separately
# for sheet in sheet_names_to_process:
#     print(f"Processing sheet: {sheet}")

#     # Read the sheet
#     df = pd.read_excel("Spotify_Daily_Top_50.xlsx", sheet_name=sheet)

#     # Convert snapshot_date to datetime
#     df["snapshot_date"] = pd.to_datetime(df["snapshot_date"])

#     # Filter only 2024 data
#     df_filtered = df[(df["snapshot_date"] >= start_date) & (df["snapshot_date"] <= end_date)]

#     # Append to the list
#     filtered_data.append(df_filtered)

# df_combined = pd.concat(filtered_data, ignore_index=True)



# #df_combined.to_excel("spotify_2024_filtered.xlsx", index=False)
# #df_combined.to_csv("spotify_2024_filtered.csv", index=False)

# print(df_combined.head())

#check the unique value and count for each country
country_counts = df_combined['country'].value_counts()
country_counts

import plotly.express as px


fig = px.bar(country_counts,
             x=country_counts.index,
             y=country_counts.values,
             labels={'x':'Country', 'y':'Count'},
             title='Distribution of Spotify Data by Country')
fig.show()

top50US_2024 = df_combined[df_combined['country'] == 'US']

top50US_2024.info()

top50US_2024.head()

# checking missing value, do we need to care about Country?
print(top50US_2024.isnull().sum())

# Convert duration_ms to seconds
top50US_2024['duration_s'] = top50US_2024['duration_ms'] / 1000

# Fill missing 'country' values with 'Global Top 50'
# df_combined['country'].fillna('Global_Top_50', inplace=True)

# print(df_combined.isnull().sum())

# Get unique artist and track name combinations
# artist_tracks = df_combined[['artists', 'name']].drop_duplicates()

# # Display the unique combinations in a table
# artist_tracks

# option 1

df_filtered_1 = top50US_2024[
    (top50US_2024['popularity'] > 60) &
    (top50US_2024['danceability'] > 0.6) &
    (top50US_2024['energy'] > 0.6)&
    (top50US_2024['is_explicit'] == False)
]

df_filtered_1.info()

# prompt: i want creata a table to show all the artists, and the songs they sing(name), and duration_ms

# Display artist, song name, and duration in a table
artist_song_duration = df_filtered_1[['artists', 'name', 'duration_s']].drop_duplicates()
artist_song_duration

artist_tracks = df_filtered_1[['artists', 'name']].drop_duplicates()
artist_tracks

# sort by='popularity'
df_filtered_1_sorted = df_filtered_1.sort_values(by='popularity', ascending=False)
artist_tracks_pop = df_filtered_1_sorted[['artists', 'name']].drop_duplicates()

artist_tracks_pop.head(50)

# sort by='daily_rank'
df_filtered_1_sorted = df_filtered_1.sort_values(by='daily_rank', ascending=False)
artist_tracks_pop = df_filtered_1_sorted[['artists', 'name']].drop_duplicates()

# Sort by artists
df_filtered_1_sorted_artists = df_filtered_1.sort_values(by='artists')

# Display artist, song name, and duration in a table, sorted by artists
artist_song_duration_sorted = df_filtered_1_sorted_artists[['artists', 'name', 'duration_s']].drop_duplicates()
print(artist_song_duration_sorted)

# Get unique artist and track name combinations sorted by artists
artist_tracks_sorted = df_filtered_1_sorted_artists[['artists', 'name']].drop_duplicates()
artist_tracks_sorted

artist_tracks_pop.head(50)

# Group by artist and sort by popularity
top_artists = df_filtered_1.groupby('artists')['popularity'].mean().sort_values(ascending=False)

top_artists.describe()

# top20?

import plotly.express as px

fig = px.bar(top_artists.head(20),
             x=top_artists.head(20).index,
             y='popularity',
             labels={'x':'Artist', 'y':'Average Popularity'},
             title='Top 20 Artists by Average Popularity (Filtered)')
fig.show()